{"version":3,"sources":["components/person.js","components/peopletable.js","components/sortFunc.js","App.js","index.js"],"names":["getClassNameOfPersonName","person","className","born","died","Person","_ref","getSelect","getClassNameOfPerson","react_default","a","createElement","key","id","onClick","name","sex","age","mother","father","concat","century","children","PeopleTable","people","style","borderCollapse","map","index","components_person","currentValue","peopleSort","sortFunc","valueForSort","reverse","Object","toConsumableArray","sort","b","localeCompare","getPeople","asyncToGenerator","regenerator_default","mark","_callee","responce","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","arguments","getFullPeople","_ref2","_callee2","peopleFromServer","_context2","objectSpread","Math","ceil","filter","human","unit","join","App","state","tempPhrase","visiblePeople","selectedPersonId","_this","setState","length","filterPhrase","event","target","value","toLowerCase","filteredPeople","includes","sortBy","prevState","_this2","type","placeholder","onInput","peopletable","React","Component","ReactDOM","render","src_App_0","test","document","getElementById"],"mappings":"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","file":"static/js/main.db261b03.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst getClassNameOfPersonName = (person) => {\n  let className = '';\n  if (person.born < 1650) {\n    className = 'bornBefore1650';\n  }\n\n  if (person.died > 1800) {\n    className = 'diedAfter1800';\n  }\n  return className;\n};\n\nconst Person = ({ person, getSelect, getClassNameOfPerson }) => (\n  <tr\n    key={person.id}\n    className={getClassNameOfPerson(person)}\n    onClick={() => getSelect(person.id)}\n  >\n    <td>{person.id}</td>\n    <td className={getClassNameOfPersonName(person)}>{person.name}</td>\n    <td>{person.sex}</td>\n    <td>{person.age}</td>\n    <td>{person.born}</td>\n    <td>{person.died}</td>\n    <td>{person.mother}</td>\n    <td>{person.father}</td>\n    <td className={`person--lived-in-${person.century}`}>{person.century}</td>\n    <td>{person.children}</td>\n  </tr>\n);\n\nPerson.propTypes = {\n  person: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    sex: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    born: PropTypes.number.isRequired,\n    died: PropTypes.number.isRequired,\n    age: PropTypes.number.isRequired,\n    century: PropTypes.number.isRequired,\n    mother: PropTypes.string.isRequired,\n    father: PropTypes.string.isRequired,\n    children: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Person;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Person from './person';\n\nconst PeopleTable = ({ people, getSelect, getClassNameOfPerson }) => (\n  <table className=\"PeopleTable\" style={{ borderCollapse: 'collapse' }}>\n    <tr>\n      <th>id</th>\n      <th>name</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>born</th>\n      <th>died</th>\n      <th>mother</th>\n      <th>father</th>\n      <th>century</th>\n      <th>children</th>\n    </tr>\n    <tbody>\n      {people.map((person, index) => (\n        <Person person={person} getSelect={getSelect} getClassNameOfPerson={getClassNameOfPerson} />\n      ))}\n    </tbody>\n  </table>\n);\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ])).isRequired,\n};\n\nexport default PeopleTable;\n","let currentValue = '';\nlet peopleSort = [];\n\nconst sortFunc = ({ valueForSort, people }) => {\n  if (currentValue === valueForSort) {\n    return peopleSort.reverse();\n  }\n\n  currentValue = valueForSort;\n  peopleSort = [...people].sort((a, b) => {\n    if (currentValue === 'name') {\n      return a[currentValue].localeCompare(b[currentValue]);\n    }\n    return a[currentValue] - b[currentValue];\n  });\n\n  return peopleSort;\n};\n\nexport default sortFunc;\n","import React from 'react';\nimport PeopleTable from './components/peopletable';\nimport './App.css';\nimport sortFunc from './components/sortFunc';\n\nconst url = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nconst getPeople = async () => {\n  const responce = await fetch(url);\n  return await responce.json();\n};\n\nconst getFullPeople = async () => {\n  const peopleFromServer = await getPeople();\n  return peopleFromServer.map((person, index) => ({\n    id: index + 1,\n    ...person,\n    father: person.father || ' ',\n    mother: person.father || ' ',\n    age: person.died - person.born,\n    century: Math.ceil(person.died / 100),\n    children: peopleFromServer.filter(\n      human => human.father === person.name || human.mother === person.name\n    ).map(unit => unit.name).join(', '),\n  }));\n};\n\nclass App extends React.Component {\n  people = [];\n  state = {\n    tempPhrase: '',\n    valueForSort: '',\n    visiblePeople: [],\n    selectedPersonId: null,\n  }\n\n  async componentDidMount() {\n    const peopleFromServer = await getFullPeople();\n\n    this.setState({\n      people: peopleFromServer,\n      visiblePeople: peopleFromServer,\n      valueForSort: 'id',\n    });\n  }\n\n  getSelect = (id) => {\n    this.setState({\n      selectedPersonId: id,\n    });\n  }\n\n  getClassNameOfPerson = (person) => {\n    let className = '';\n    if (person.id === this.state.selectedPersonId) {\n      className = 'person selectedPerson';\n    } else {\n      className = 'person';\n    }\n\n    if (person.sex === 'm') {\n      className += ' person--male';\n    } else {\n      className += ' person--female';\n    }\n\n    if (person.sex === 'm' && person.children.length > 0) {\n      className += ' person--father';\n    }\n\n    if (person.sex === 'f' && person.children.length > 0) {\n      className += ' person--mother';\n    }\n\n    if ((person.died - person.born) > 65) {\n      className += ' livedOver65Years';\n    }\n\n    return className;\n  };\n\n  filterPhrase = (event) => {\n    const tempPhrase = event.target.value.toLowerCase();\n\n    const filteredPeople = this.state.people.filter(person => (\n      person.name.toLowerCase().includes(tempPhrase)\n      || person.father.toLowerCase().includes(tempPhrase)\n      || person.mother.toLowerCase().includes(tempPhrase)\n    ));\n\n    this.setState({\n      visiblePeople: filteredPeople,\n      tempPhrase,\n    });\n  }\n\n  sortBy = (valueForSort) => {\n    this.setState({\n      valueForSort,\n    });\n\n    this.setState(prevState => ({\n      visiblePeople: sortFunc(prevState),\n    }));\n  }\n\n  render() {\n    return (\n      <main>\n        <h1>\n          People table\n          {this.state.visiblePeople.length}\n        </h1>\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"filter by name, mother and father\"\n            onInput={this.filterPhrase}\n          />\n          <div className=\"button-list\">\n            <button\n              type=\"button\"\n              className=\"button-sort\"\n              onClick={() => this.sortBy('id')}\n            >\n              Sort ID\n            </button>\n            <button\n              type=\"button\"\n              className=\"button-sort\"\n              onClick={() => this.sortBy('name')}\n            >\n              Sort NAME\n            </button>\n            <button\n              type=\"button\"\n              className=\"button-sort\"\n              onClick={() => this.sortBy('born')}\n            >\n              Sort BIRTH\n            </button>\n            <button\n              type=\"button\"\n              className=\"button-sort\"\n              onClick={() => this.sortBy('died')}\n            >\n              Sort DEATH\n            </button>\n            <button\n              type=\"button\"\n              className=\"button-sort\"\n              onClick={() => this.sortBy('age')}\n            >\n              Sort AGE\n            </button>\n          </div>\n        </form>\n\n        <PeopleTable\n          people={this.state.visiblePeople}\n          getClassNameOfPerson={this.getClassNameOfPerson}\n          selectedPersonId={this.state.selectedPersonId}\n          getSelect={this.getSelect}\n        />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App test={123} />, document.getElementById('root'));\n"],"sourceRoot":""}